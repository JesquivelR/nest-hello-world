version: 0.2

env:
  variables:
    REPOSITORY_URI: "181230042822.dkr.ecr.us-east-1.amazonaws.com/nest-hello-world"
    ENV: "prod"
    PROJECT: "pruebas"
    APPLICATION: "nest-hello-world"
    SONAR_TOKEN: "d9af1d73e3713b008a813830a7e091cd40df2950"
    NVD_API_key: "ed5ecefa-22d4-4af1-8a89-9739e0ac607f"
    DC_VERSION: "12.1.1"
    # Nuevas variables parametrizadas
    SONAR_SCANNER_VERSION: "7.1.0.4889"
    DEPENDENCY_CHECK_DIR: "/opt/dependency-check"
    SONAR_SCANNER_DIR: "/opt/sonar-scanner"

phases:
  install:
    runtime-versions:
      java: corretto17
      nodejs: 18
    commands:
      - echo "=== Fase de instalación ==="
      
      # Instalación optimizada de SonarScanner (con caché)
      - if [ ! -d "$SONAR_SCANNER_DIR" ]; then
          echo "Instalando SonarScanner v$SONAR_SCANNER_VERSION";
          wget -q "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux-x64.zip" -O /tmp/sonar-scanner.zip;
          unzip -q /tmp/sonar-scanner.zip -d /opt/;
          mv /opt/sonar-scanner-* $SONAR_SCANNER_DIR;
          ln -s $SONAR_SCANNER_DIR/bin/sonar-scanner /usr/local/bin/;
        fi

      # Instalación optimizada de Dependency-Check
      - if [ ! -d "$DEPENDENCY_CHECK_DIR" ]; then
          echo "Instalando Dependency-Check v${DC_VERSION}";
          wget -q "https://github.com/dependency-check/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip" -O /tmp/dependency-check.zip;
          unzip -q /tmp/dependency-check.zip -d /opt/;
          mv /opt/dependency-check-* $DEPENDENCY_CHECK_DIR;
          ln -s $DEPENDENCY_CHECK_DIR/bin/dependency-check.sh /usr/local/bin/dependency-check;
        fi

      # Verificación de herramientas
      - node --version
      - npm --version
      - sonar-scanner -v
      - dependency-check --version

  pre_build:
    commands:
      - echo "=== Pre-Build ==="
      
      # Login seguro a ECR
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI%/*}
      
      # Metadata para despliegues
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - export IMAGE_TAG=${ENV}-${APPLICATION}-${COMMIT_HASH}-${CODEBUILD_BUILD_NUMBER}
      - export IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      
      # Instalación inteligente de dependencias
      - echo "Restaurando dependencias de Node.js"
      - npm ci --cache .npm --prefer-offline

  build:
    commands:
      - echo "=== Build ==="
      
      # Ejecución paralela de análisis de seguridad
      - >
        dependency-check --project "$APPLICATION" --scan "package-lock.json" --scan "src" --format HTML 
        --out reports/dependency-check --enableExperimental --nvdApiKey "$NVD_API_key" --failOnCVSS 7 
        --suppression dependency-check-suppressions.xml &
      - >
        sonar-scanner -Dsonar.token=$SONAR_TOKEN -Dsonar.branch.name=$(git rev-parse --abbrev-ref HEAD | sed "s/[^a-zA-Z0-9]/_/g") &
      - wait
      
      # Construcción eficiente de Docker (usando caché de build)
      - echo "Construyendo imagen Docker"
      - docker build --cache-from $REPOSITORY_URI:latest -t $IMAGE_URI -t $REPOSITORY_URI:latest .

  post_build:
    commands:
      - echo "=== Post-Build ==="
      
      # Push de imágenes con etiquetas múltiples
      - docker push $IMAGE_URI
      - docker push $REPOSITORY_URI:latest
      
      # Generación de artefactos
      - mkdir -p artefactos/{dependency-check,ecs}
      - printf '[{"name":"%s","imageUri":"%s"}]' "$APPLICATION" "$IMAGE_URI" > artefactos/ecs/imagedefinitions.json
      - cp -r reports/dependency-check/* artefactos/dependency-check/

artifacts:
  files:
    - 'artefactos/**/*'
  base-directory: 'artefactos'

cache:
  paths:
    - '/root/.sonar/cache/**/*'
    - '$DEPENDENCY_CHECK_DIR/data/**/*'
    - '/root/.npm/**/*'
    - '$SONAR_SCANNER_DIR/**/*'
    - '.npm/**/*'