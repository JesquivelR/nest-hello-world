version: 0.2

env:
  variables:
    REPOSITORY_URI: "181230042822.dkr.ecr.us-east-1.amazonaws.com/nest-hello-world"
    ENV: "prod"
    PROJECT: "pruebas"
    APPLICATION: "nest-hello-world"
    SONAR_TOKEN: "d9af1d73e3713b008a813830a7e091cd40df2950"
    NVD_API_key: "ed5ecefa-22d4-4af1-8a89-9739e0ac607f"
    SONAR_SCANNER_IMAGE: "sonarsource/sonar-scanner-cli:11.3.1.1910_7.1.0"
    DEPENDENCY_CHECK_IMAGE: "owasp/dependency-check:12.1.1"
    # Opciones adicionales para verbosidad
    DC_LOG_LEVEL: "INFO"  # DEBUG, INFO, WARN, ERROR
    SONAR_VERBOSE: "true" # true/false

phases:
  install:
    runtime-versions:
      nodejs: 24
    commands:
      - echo "=== Fase de instalación ==="
      - 'echo "Docker version: $(docker --version)"'
      - echo "Pre-pulling imágenes de herramientas..."
      - docker pull $SONAR_SCANNER_IMAGE
      - docker pull $DEPENDENCY_CHECK_IMAGE
      - echo "Imágenes listas:"
      - docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  pre_build:
    commands:
      - echo "=== Pre-Build ==="
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI%/*}
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - export IMAGE_TAG=${ENV}-${APPLICATION}-${COMMIT_HASH}-${CODEBUILD_BUILD_NUMBER}
      - export IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      - echo "Instalando dependencias de Node.js..."
      - npm ci --cache .npm --prefer-offline

  build:
    commands:
      - echo "=== Build ==="
      
      # 1. Dependency-Check con logs detallados
      - echo "Iniciando análisis de vulnerabilidades..."
      - mkdir -p reports/dependency-check
      - >
        docker run --rm -u $(id -u):$(id -g) -v "$(pwd):/src" 
        -e LOG_LEVEL=$DC_LOG_LEVEL  # Control de verbosidad
        $DEPENDENCY_CHECK_IMAGE 
        --project "$APPLICATION" 
        --scan "package-lock.json" 
        --scan "node_modules"
        --format HTML 
        --out "/src/reports/dependency-check" 
        --enableExperimental 
        --nvdApiKey "$NVD_API_key" 
        --failOnCVSS 7 
        --suppression "/src/dependency-check-suppressions.xml" 
        --log "/src/reports/dependency-check/dependency-check.log" 
        || echo "##[warning] Dependency-Check encontró vulnerabilidades"
      
      # Mostrar resumen del análisis
      - echo "Resumen de Dependency-Check:"
      - tail -n 20 reports/dependency-check/dependency-check.log || echo "No se encontró log"
      
      # 2. SonarScanner con modo verbose
      - echo "Iniciando análisis de código..."
      - CURRENT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | sed "s/[^a-zA-Z0-9]/_/g")
      - >
        docker run --rm -u $(id -u):$(id -g) -v "$(pwd):/usr/src" 
        $SONAR_SCANNER_IMAGE 
        sonar-scanner 
        -Dsonar.token=$SONAR_TOKEN 
        -Dsonar.branch.name=$CURRENT_BRANCH_NAME 
        -Dsonar.verbose=$SONAR_VERBOSE  # Activar verbosidad
      
      # 3. Construcción de la aplicación
      - echo "Construyendo imagen Docker..."
      - docker build -t $IMAGE_URI -t $REPOSITORY_URI:latest .

  post_build:
    commands:
      - echo "=== Post-Build ==="
      - docker push $IMAGE_URI
      - docker push $REPOSITERY_URI:latest
      - mkdir -p artefactos/{dependency-check,ecs}
      - cp -r reports/dependency-check/* artefactos/dependency-check/ || echo "No se encontraron reportes"
      - printf '[{"name":"%s","imageUri":"%s"}]' "$APPLICATION" "$IMAGE_URI" > artefactos/ecs/imagedefinitions.json
      - echo "Artefactos generados:"
      - find artefactos -type f | xargs ls -lh

artifacts:
  files:
    - '**/*'
  base-directory: 'artefactos'
  discard-paths: no

cache:
  paths:
    - '/root/.npm/**/*'
    - '.npm/**/*'